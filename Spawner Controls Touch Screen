-- Find all connected monitors
local monitors = {peripheral.find("monitor")}
local mon = {}

-- Create a wrapper for monitor functions
for funcName, _ in pairs(monitors[1]) do
    mon[funcName] = function(...)
        for i = 1, #monitors do
            monitors[i][funcName](...)
        end
    end
end

-- Set the background color to cyan
mon.setBackgroundColor(colors.cyan)
mon.clear()

-- Define button properties with their corresponding computers
local buttons = {
    {label = "Slime", target = "Enderslime"},
    {label = "Enderman", target = "Enderslime"},
    {label = "Blaze", target = "Witchblaze"},
    {label = "Witch", target = "Witchblaze"},
    {label = "Cow", target = "Cowpig"},
    {label = "Pig", target = "Cowpig"},
    {label = "Sheep", target = "Sheepchicken"},
    {label = "Chicken", target = "Sheepchicken"},
}

-- Function to draw buttons
local function drawButtons()
    for i, button in ipairs(buttons) do
        local x = 1 -- Adjusted for 5 wide
        local y = i -- Each button on a new line (1-indexed)
        
        -- Draw button border
        mon.setBackgroundColor(colors.black)
        mon.setTextColor(colors.purple)
        mon.setCursorPos(x, y)
        mon.write(string.rep(" ", 5)) -- Clear space for button
        mon.setCursorPos(x, y)
        mon.write(" " .. button.label .. " ")
        
        -- Reset colors for background
        mon.setBackgroundColor(colors.cyan)
        mon.setCursorPos(x, y)
        mon.write(string.rep(" ", 5))
    end
end

-- Draw the buttons
drawButtons()

-- Function to handle button clicks
local function handleClick(x, y)
    for i, button in ipairs(buttons) do
        if y >= 1 and y <= 8 and x >= 1 and x <= 5 then
            return button
        end
    end
    return nil
end

-- Main loop
while true do
    local event, param1, param2 = os.pullEvent("mouse_click")
    local button = handleClick(param1, param2)
    if button then
        -- Send the button label to the respective computer
        rednet.send(button.target, button.label)
    end
end
