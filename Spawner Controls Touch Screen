-- Check if a monitor is attached
local monitorSide = "top" -- Change to the correct side if necessary
local monitor = peripheral.wrap(monitorSide)

-- Set the background color to cyan
monitor.setBackgroundColor(colors.cyan)
monitor.clear()

-- Define button properties with their corresponding computers
local buttons = {
    {label = "Slime", target = "Enderslime"},
    {label = "Enderman", target = "Enderslime"},
    {label = "Blaze", target = "Witchblaze"},
    {label = "Witch", target = "Witchblaze"},
    {label = "Cow", target = "Cowpig"},
    {label = "Pig", target = "Cowpig"},
    {label = "Sheep", target = "Sheepchicken"},
    {label = "Chicken", target = "Sheepchicken"},
}

-- Function to draw buttons
local function drawButtons()
    for i, button in ipairs(buttons) do
        local x = 2
        local y = 2 + (i - 1) * 3
        
        -- Draw button border
        monitor.setBackgroundColor(colors.black)
        monitor.setTextColor(colors.purple)
        monitor.setCursorPos(x, y)
        monitor.write(string.rep(" ", 15)) -- Button width
        monitor.setCursorPos(x, y)
        monitor.write(" " .. button.label .. " ")
        
        -- Reset colors for background
        monitor.setBackgroundColor(colors.cyan)
        monitor.setCursorPos(x, y)
        monitor.write(string.rep(" ", 15))
    end
end

-- Draw the buttons
drawButtons()

-- Function to handle button clicks
local function handleClick(x, y)
    for i, button in ipairs(buttons) do
        if y >= 2 + (i - 1) * 3 and y <= 4 + (i - 1) * 3 and x >= 2 and x <= 16 then
            return button
        end
    end
    return nil
end

-- Main loop
while true do
    local event, param1, param2 = os.pullEvent("mouse_click")
    local button = handleClick(param1, param2)
    if button then
        -- Send the button label to the respective computer
        rednet.send(button.target, button.label)
    end
end
